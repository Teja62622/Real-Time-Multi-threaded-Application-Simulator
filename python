import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import threading
import time
import random

# ---------------------------
# Custom CSS for Enhanced Styling
# ---------------------------
st.markdown("""
    <style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f5f5;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        border: none;
        padding: 0.5em 1em;
        font-size: 1em;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    </style>
    """, unsafe_allow_html=True)

# ---------------------------
# App Configuration
# ---------------------------
st.set_page_config(page_title="Real-Time Multi-threaded Application Simulator", layout="wide")
st.title("üßµ Real-Time Multi-threaded Application Simulator")
st.markdown("""
This simulator demonstrates how multiple threads execute tasks concurrently.
Adjust the settings in the sidebar and run the simulation to observe real-time execution.
""")

# Sidebar: Select Number of Threads and Task Duration
num_threads = st.sidebar.number_input("üî¢ Number of Threads", min_value=1, max_value=10, value=3, step=1)
max_duration = st.sidebar.number_input("‚è≥ Max Task Duration (seconds)", min_value=1, max_value=10, value=5, step=1)

# ===========================
# Thread Simulation
# ===========================
class ThreadTask(threading.Thread):
    def __init__(self, thread_id, duration, update_callback):
        threading.Thread.__init__(self)
        self.thread_id = thread_id
        self.duration = duration
        self.start_time = None
        self.end_time = None
        self.update_callback = update_callback

    def run(self):
        self.start_time = time.time()
        for i in range(self.duration):
            time.sleep(1)
            self.update_callback(self.thread_id, i + 1, self.duration)
        self.end_time = time.time()

def simulate_threads(num_threads, max_duration, progress_bar, progress_text):
    threads = []
    results = []
    thread_progress = {i + 1: 0 for i in range(num_threads)}

    def update_progress(thread_id, progress, total):
        thread_progress[thread_id] = progress / total
        overall_progress = np.mean(list(thread_progress.values()))
        progress_bar.progress(overall_progress)
        progress_text.text(f"Thread {thread_id} running: {progress}/{total} seconds")

    for i in range(num_threads):
        duration = random.randint(1, max_duration)
        thread = ThreadTask(i + 1, duration, update_progress)
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()
        results.append((thread.thread_id, thread.start_time, thread.end_time, thread.duration))

    progress_bar.progress(1.0)
    progress_text.text("Simulation complete!")
    return results

# ===========================
# Visualization
# ===========================
def plot_thread_execution(results):
    df = pd.DataFrame(results, columns=["Thread ID", "Start Time", "End Time", "Duration"])
    df['Execution Time'] = df['End Time'] - df['Start Time']

    fig, ax = plt.subplots(figsize=(10, 6))
    for index, row in df.iterrows():
        ax.barh(row['Thread ID'], row['Execution Time'], left=row['Start Time'], color='skyblue')
    
    ax.set_xlabel("Time (seconds)")
    ax.set_ylabel("Thread ID")
    ax.set_title("Thread Execution Timeline")
    ax.grid(True)
    st.pyplot(fig)

# ===========================
# App Layout and UI
# ===========================
if st.button("‚ñ∂ Run Simulation"):
    progress_bar = st.progress(0)
    progress_text = st.empty()
    results = simulate_threads(num_threads, max_duration, progress_bar, progress_text)
    
    st.success("‚úÖ Simulation complete!")
    st.subheader("üìä Thread Execution Results")
    st.write(pd.DataFrame(results, columns=["Thread ID", "Start Time", "End Time", "Duration"]))
    
    st.subheader("üìà Execution Timeline")
    plot_thread_execution(results)

st.markdown("---")
st.markdown("üìù This tool is for educational purposes. Adjust the parameters to explore how multi-threaded applications behave.")
